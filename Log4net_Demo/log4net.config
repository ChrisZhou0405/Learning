<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <!-- Register a section handler for the log4net section -->
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>


  <log4net>
    <!--声明跟节点 和设置 默认level-->
    <!--在框架的体系里，所有的日志对象都是根日志(root logger)的后代。 因此如果一个日志对象没有在配置文件里显式定义，则框架使用根日志中定义的属性。在<root>标签里，可以定义level级别值和Appender的列表。如果没有定义LEVEL的值，则缺省为DEBUG。可以通过<appender-ref>标签定义日志对象使用的Appender对象。<appender-ref>声明了在其他地方定义的Appender对象的一个引用。在一个logger对象中的设置会覆盖根日志的设置。而对Appender属性来说，子日志对象则会继承父日志对象的Appender列表。这种缺省的行为方式也可以通过显式地设定<logger>标签的additivity属性为false而改变。
     <logger name="testApp.Logging" additivity="false"></logger>
     Additivity的值缺省是true.-->
    <root>
      <!--(高) OFF > FATAL > ERROR > WARN > INFO > DEBUG > ALL (低) -->
      <level value="ALL"/>
      <appender-ref ref="RollingLogFileAppender" />
    </root>



    <!--定义logger实例-->
    <!--<logger> 元素预定义了一个具体日志对象的设置。然后通过调用LogManager.GetLogger(“RollingFileAppender”)函数，你可以检索具有该名字的日志。如果LogManager.GetLogger(…)打开的不是预定义的日志对象，则该日志对象会继承根日志对象的属性。知道了这一点，我们可以说，其实<logger>标签并不是必须的。-->
    <logger name="RollingFileAppender">
      <level value="DEBUG"/>
      <appender-ref ref="RollingLogFileAppender" />
    </logger>

    <logger name="FileAppender">
      <level value="DEBUG"/>
      <appender-ref ref="LogFileAppender" />
    </logger>



    <!--设置appender 形式-->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--日志路径-->
      <file type="log4net.Util.PatternString"  value="Log/%date{yyyy-MM}/"/>
      <!--是否是向文件中追加日志-->
      <appendToFile value="true"/>
      <!--指明日志滚动方式。"Composite"指文件名同时按size和date来命名，一般就用这个。还有其他3个取值：Once(每次程序启动新生成一个)、Size、Date。当RollingStyle=Composite时，如果File参数设为"D:\WebTest\MyLog_" ，那么文件名将是："MyLog_2015-11-27.txt-->
      <rollingStyle value="Date"/>
      <!--日志文件名格式为:2018-02-05.LOG-->
      <datePattern value="yyyy-MM-dd.LOG"/>
      <!--日志文件名是否是固定不变的-->
      <staticLogFileName value="false"/>
      <!--限定每个日志文件不超过10M-->
      <maximumFileSize value="10000" />
      <!--到达限制大小后会生成一个新文件，如"2015-11-27.txt.1"，依此类推，当生成"2015-11-27.txt.10"之后，再满了就要回头覆盖第一个文件了-->
      <maxSizeRollBackups value="10" />
      <layout type="log4net.Layout.PatternLayout">
         <conversionPattern value="%newline %nLog Time：%utcdate %nThread ID:[%thread] %nLog %method Level：  %-5level %n%message%newline %n"/>
      </layout>
    </appender>

    <appender name="LogFileAppender" type="log4net.Appender.FileAppender">
      <param name="File" value="Log/AT.log"/>
      <param name="datePattern" value="YY-MM-dd HH:mm"/>
      <param name="AppendToFile" value="true"/>
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n"/>
      </layout>
    </appender>

   <!--log4net.Layout.PatternLayout中的转换模式(ConversionPattern)-->
    <!-- 
     %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
     %n(new line):换行
     %d(datetime):输出当前语句运行的时刻
     %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
     %t(thread id):当前语句所在的线程ID
     %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
     %c(class):当前日志对象的名称，例如：
     模式字符串为：%-10c -%m%n
      代码为：
     ILog log=LogManager.GetLogger(“Exam.Log”);
     log.Debug(“Hello”);
         则输出为下面的形式：
     Exam.Log       - Hello
     %L：输出语句所在的行号
     %F：输出语句所在的文件名
     %-数字：表示该项的最小长度，如果不够，则用空格填充
     例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出：
     176 [main] INFO  org.foo.Bar - Located nearest gas station.
     -->
  </log4net>

</configuration>
